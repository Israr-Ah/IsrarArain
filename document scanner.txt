import the necessary packages
import numpy as np
import cv2
def order_points(pts):
# initialzie a list of coordinates that will be ordered
# such that the first entry in the list is the top-left,
# the second entry is the top-right, the third is the
# bottom-right, and the fourth is the bottom-left
rect = np.zeros((4, 2), dtype = "float32")
# the top-left point will have the smallest sum, whereas
# the bottom-right point will have the largest sum
s = pts.sum(axis = 1)
rect[0] = pts[np.argmin(s)]
rect[2] = pts[np.argmax(s)]

# now, compute the difference between the points, the
# top-right point will have the smallest difference,
# whereas the bottom-left will have the largest difference
diff = np.diff(pts, axis = 1)
rect[1] = pts[np.argmin(diff)]
rect[3] = pts[np.argmax(diff)]

# return the ordered coordinates
return rect
def four_point_transform(image, pts):
# obtain a consistent order of the points and unpack them
# individually
rect = order_points(pts)
(tl, tr, br, bl) = rect
# compute the width of the new image, which will be the
# maximum distance between bottom-right and bottom-left
# x-coordiates or the top-right and top-left x-coordinates
widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
maxWidth = max(int(widthA), int(widthB))

# compute the height of the new image, which will be the
# maximum distance between the top-right and bottom-right
# y-coordinates or the top-left and bottom-left y-coordinates
heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
maxHeight = max(int(heightA), int(heightB))

# now that we have the dimensions of the new image, construct
# the set of destination points to obtain a "birds eye view",
# (i.e. top-down view) of the image, again specifying points
# in the top-left, top-right, bottom-right, and bottom-left
# order
dst = np.array([
	[0, 0],
	[maxWidth - 1, 0],
	[maxWidth - 1, maxHeight - 1],
	[0, maxHeight - 1]], dtype = "float32")

# compute the perspective transform matrix and then apply it
M = cv2.getPerspectiveTransform(rect, dst)
warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))

# return the warped image
return warped


{
"cells": [
{
"cell_type": "code",
"execution_count": 10,
"metadata": {},
"outputs": [],
"source": [
"import cv2\n",
"import imutils\n",
"from skimage.filters import threshold_local\n",
"from pyimagesearch.transform import four_point_transform\n",
"import numpy as np\n",
"\n",
"img_path = 'b.jpg'\n",
"big_img = cv2.imread(img_path)\n",
"cv2.imshow('org img',big_img)\n",
"cv2.waitKey(0)\n",
"\n",
"\n",
"ratio = big_img.shape[0] / 500.0\n",
"org = big_img.copy()\n",
"img = imutils.resize(big_img, height = 500)\n",
"cv2.imshow('resizing',img)\n",
"cv2.waitKey(0)\n",
"\n",
"\n",
"gray_img = cv2.cvtColor(img.copy(),cv2.COLOR_BGR2GRAY)\n",
"blur_img = cv2.GaussianBlur(gray_img,(5,5),0)\n",
"edged_img = cv2.Canny(blur_img,75,200)\n",
"cv2.imshow('edged',edged_img)\n",
"cv2.waitKey(0)\n",
"\n",
"\n",
"cnts,_ = cv2.findContours(edged_img.copy(),cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\n",
"cnts = sorted(cnts,key=cv2.contourArea,reverse=True)[:5]\n",
"for c in cnts:\n",
"    peri = cv2.arcLength(c,True)\n",
"    approx = cv2.approxPolyDP(c,0.02*peri,True)\n",
"    if len(approx)==4:\n",
"        doc = approx\n",
"        break\n",
"        \n",
"        \n",
"p=[]\n",
"for d in doc:\n",
"    tuple_point = tuple(d[0])\n",
"    cv2.circle(img,tuple_point,3,(0,0,255),4)\n",
"    p.append(tuple_point)\n",
"cv2.imshow('Corner points detected',img)\n",
"cv2.waitKey(0)\n",
"\n",
"\n",
"warped = four_point_transform(org, doc.reshape(4, 2) * ratio)\n",
"warped = cv2.cvtColor(warped, cv2.COLOR_BGR2GRAY)\n",
"cv2.imshow(\"Warped\", imutils.resize(warped, height = 650))\n",
"cv2.waitKey(0)\n",
"\n",
"\n",
"T = threshold_local(warped, 11, offset = 10, method = \"gaussian\")\n",
"warped = (warped > T).astype(\"uint8\") * 255\n",
"cv2.imshow(\"Scanned\", imutils.resize(warped, height = 650))\n",
"cv2.waitKey(0)\n",
"cv2.destroyAllWindows()"
]
},
{
"cell_type": "code",
"execution_count": 7,
"metadata": {},
"outputs": [],
"source": []
},
{
"cell_type": "code",
"execution_count": 8,
"metadata": {},
"outputs": [],
"source": []
}
],
"metadata": {
"kernelspec": {
"display_name": "Python 3",
"language": "python",
"name": "python3"
},
"language_info": {
"codemirror_mode": {
"name": "ipython",
"version": 3
},
"file_extension": ".py",
"mimetype": "text/x-python",
"name": "python",
"nbconvert_exporter": "python",
"pygments_lexer": "ipython3",
"version": "3.8.8"
}
},
"nbformat": 4,
"nbformat_minor": 2
}
